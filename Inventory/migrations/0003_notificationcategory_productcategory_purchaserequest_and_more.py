# Generated by Django 5.2.3 on 2025-07-11 16:27

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('Inventory', '0002_initial'),
        ('store', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('icon', models.CharField(default='bi-bell', max_length=50)),
                ('color', models.CharField(default='primary', max_length=20)),
                ('priority', models.PositiveIntegerField(default=1, help_text='Lower numbers = higher priority')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Notification Categories',
                'ordering': ['priority', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Product Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_number', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('required_delivery_date', models.DateField()),
                ('delivery_address', models.TextField()),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent to Supplier'), ('acknowledged', 'Acknowledged by Supplier'), ('quoted', 'Quote Provided'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('converted', 'Converted to Purchase Order'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('supplier_notes', models.TextField(blank=True)),
                ('internal_notes', models.TextField(blank=True)),
                ('estimated_total', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('quoted_total', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('sent_date', models.DateTimeField(blank=True, null=True)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_requests', to=settings.AUTH_USER_MODEL)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_requests', to='Inventory.supplier')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='RestockRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_number', models.CharField(editable=False, max_length=50, unique=True)),
                ('requested_quantity', models.PositiveIntegerField(help_text='Quantity requested for restock')),
                ('current_stock', models.PositiveIntegerField(help_text='Current stock level at time of request')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('reason', models.TextField(help_text='Reason for restock request')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('fulfilled', 'Fulfilled')], default='pending', max_length=20)),
                ('requested_date', models.DateTimeField(auto_now_add=True)),
                ('reviewed_date', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Notes from head manager review')),
                ('approved_quantity', models.PositiveIntegerField(blank=True, help_text='Quantity approved by head manager', null=True)),
                ('fulfilled_quantity', models.PositiveIntegerField(blank=True, help_text='Actual quantity fulfilled', null=True)),
                ('fulfilled_date', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restock_requests', to='Inventory.product')),
                ('requested_by', models.ForeignKey(limit_choices_to={'role': 'store_manager'}, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_restock_requests', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'head_manager'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_restock_requests', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restock_requests', to='store.store')),
            ],
            options={
                'ordering': ['-requested_date'],
            },
        ),
        migrations.CreateModel(
            name='StoreStockTransferRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_number', models.CharField(editable=False, max_length=50, unique=True)),
                ('requested_quantity', models.PositiveIntegerField(help_text='Quantity requested for transfer')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('reason', models.TextField(help_text='Reason for stock transfer request')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('in_transit', 'In Transit'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('requested_date', models.DateTimeField(auto_now_add=True)),
                ('reviewed_date', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Notes from head manager review')),
                ('approved_quantity', models.PositiveIntegerField(blank=True, help_text='Quantity approved for transfer', null=True)),
                ('shipped_date', models.DateTimeField(blank=True, null=True)),
                ('received_date', models.DateTimeField(blank=True, null=True)),
                ('actual_quantity_transferred', models.PositiveIntegerField(blank=True, help_text='Actual quantity transferred', null=True)),
                ('from_store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_transfer_requests', to='store.store')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_requests', to='Inventory.product')),
                ('requested_by', models.ForeignKey(limit_choices_to={'role': 'store_manager'}, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_transfer_requests', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, limit_choices_to={'role': 'head_manager'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_transfer_requests', to=settings.AUTH_USER_MODEL)),
                ('to_store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_transfer_requests', to='store.store')),
            ],
            options={
                'ordering': ['-requested_date'],
            },
        ),
        migrations.CreateModel(
            name='RequestNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('restock_submitted', 'Restock Request Submitted'), ('restock_approved', 'Restock Request Approved'), ('restock_rejected', 'Restock Request Rejected'), ('restock_fulfilled', 'Restock Request Fulfilled'), ('transfer_submitted', 'Transfer Request Submitted'), ('transfer_approved', 'Transfer Request Approved'), ('transfer_rejected', 'Transfer Request Rejected'), ('transfer_completed', 'Transfer Request Completed')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_notifications', to=settings.AUTH_USER_MODEL)),
                ('restock_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Inventory.restockrequest')),
                ('transfer_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Inventory.storestocktransferrequest')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='SupplierProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=200)),
                ('product_code', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=100)),
                ('subcategory', models.CharField(blank=True, max_length=100)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('minimum_order_quantity', models.PositiveIntegerField(default=1)),
                ('maximum_order_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('specifications', models.TextField(blank=True, help_text='Detailed product specifications')),
                ('dimensions', models.CharField(blank=True, max_length=100)),
                ('weight', models.CharField(blank=True, max_length=50)),
                ('color_options', models.CharField(blank=True, max_length=200)),
                ('material', models.CharField(blank=True, max_length=100)),
                ('availability_status', models.CharField(choices=[('in_stock', 'In Stock'), ('limited_stock', 'Limited Stock'), ('out_of_stock', 'Out of Stock'), ('discontinued', 'Discontinued'), ('pre_order', 'Pre-Order')], default='in_stock', max_length=20)),
                ('estimated_delivery_time', models.CharField(help_text="e.g., '2-3 business days', '1 week'", max_length=100)),
                ('stock_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('product_image', models.ImageField(blank=True, null=True, upload_to='supplier_products/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='catalog_products', to='Inventory.supplier')),
            ],
            options={
                'ordering': ['product_name'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequestItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_quantity', models.PositiveIntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('quoted_unit_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('quoted_total_price', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('supplier_notes', models.TextField(blank=True)),
                ('special_requirements', models.TextField(blank=True)),
                ('purchase_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='Inventory.purchaserequest')),
                ('supplier_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_items', to='Inventory.supplierproduct')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SupplierProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(max_length=200)),
                ('business_type', models.CharField(choices=[('manufacturer', 'Manufacturer'), ('distributor', 'Distributor'), ('wholesaler', 'Wholesaler'), ('retailer', 'Retailer'), ('service_provider', 'Service Provider'), ('other', 'Other')], max_length=20)),
                ('business_registration_number', models.CharField(blank=True, max_length=100)),
                ('tax_id', models.CharField(blank=True, max_length=50)),
                ('primary_contact_name', models.CharField(max_length=100)),
                ('primary_contact_title', models.CharField(blank=True, max_length=100)),
                ('primary_contact_phone', models.CharField(max_length=20)),
                ('primary_contact_email', models.EmailField(max_length=254)),
                ('business_address_line1', models.CharField(max_length=200)),
                ('business_address_line2', models.CharField(blank=True, max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('state_province', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('product_categories', models.TextField(help_text='Comma-separated list of product categories supplied')),
                ('estimated_delivery_timeframe', models.CharField(help_text="e.g., '3-5 business days', '1-2 weeks'", max_length=100)),
                ('preferred_payment_terms', models.CharField(choices=[('net_15', 'Net 15 Days'), ('net_30', 'Net 30 Days'), ('net_45', 'Net 45 Days'), ('net_60', 'Net 60 Days'), ('cod', 'Cash on Delivery'), ('advance', 'Advance Payment'), ('credit_card', 'Credit Card')], default='net_30', max_length=20)),
                ('minimum_order_value', models.DecimalField(decimal_places=2, default=0, help_text='Minimum order value in USD', max_digits=10)),
                ('business_license', models.CharField(blank=True, max_length=200)),
                ('certifications', models.TextField(blank=True, help_text='List any relevant business certifications')),
                ('insurance_details', models.TextField(blank=True)),
                ('bank_name', models.CharField(blank=True, max_length=200)),
                ('account_number', models.CharField(blank=True, max_length=50)),
                ('routing_number', models.CharField(blank=True, max_length=20)),
                ('is_onboarding_complete', models.BooleanField(default=False)),
                ('onboarding_completed_date', models.DateTimeField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('supplier', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='Inventory.supplier')),
            ],
            options={
                'ordering': ['business_name'],
            },
        ),
        migrations.CreateModel(
            name='SystemNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('unassigned_store_manager', 'Unassigned Store Manager'), ('empty_store', 'Empty Store'), ('pending_restock_request', 'Pending Restock Request'), ('pending_transfer_request', 'Pending Transfer Request'), ('new_supplier_registration', 'New Supplier Registration'), ('request_approved', 'Request Approved'), ('request_rejected', 'Request Rejected'), ('low_stock_alert', 'Low Stock Alert'), ('system_announcement', 'System Announcement')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('target_roles', models.JSONField(default=list, help_text='List of roles that should see this notification')),
                ('related_user_id', models.PositiveIntegerField(blank=True, help_text='ID of related user', null=True)),
                ('related_object_type', models.CharField(blank=True, max_length=50, null=True)),
                ('related_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('action_url', models.CharField(blank=True, help_text='URL for primary action', max_length=500)),
                ('action_text', models.CharField(blank=True, help_text='Text for action button', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When notification should expire', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='Inventory.notificationcategory')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('target_users', models.ManyToManyField(blank=True, related_name='targeted_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNotificationStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_statuses', to='Inventory.systemnotification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_statuses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='restockrequest',
            index=models.Index(fields=['request_number'], name='Inventory_r_request_660067_idx'),
        ),
        migrations.AddIndex(
            model_name='restockrequest',
            index=models.Index(fields=['store', 'status'], name='Inventory_r_store_i_1fcd51_idx'),
        ),
        migrations.AddIndex(
            model_name='restockrequest',
            index=models.Index(fields=['product', 'status'], name='Inventory_r_product_2f8d66_idx'),
        ),
        migrations.AddIndex(
            model_name='restockrequest',
            index=models.Index(fields=['requested_date'], name='Inventory_r_request_705fe1_idx'),
        ),
        migrations.AddIndex(
            model_name='restockrequest',
            index=models.Index(fields=['status'], name='Inventory_r_status_203656_idx'),
        ),
        migrations.AddIndex(
            model_name='storestocktransferrequest',
            index=models.Index(fields=['request_number'], name='Inventory_s_request_cdace2_idx'),
        ),
        migrations.AddIndex(
            model_name='storestocktransferrequest',
            index=models.Index(fields=['from_store', 'status'], name='Inventory_s_from_st_4a21ad_idx'),
        ),
        migrations.AddIndex(
            model_name='storestocktransferrequest',
            index=models.Index(fields=['to_store', 'status'], name='Inventory_s_to_stor_90d3c0_idx'),
        ),
        migrations.AddIndex(
            model_name='storestocktransferrequest',
            index=models.Index(fields=['product', 'status'], name='Inventory_s_product_41e168_idx'),
        ),
        migrations.AddIndex(
            model_name='storestocktransferrequest',
            index=models.Index(fields=['requested_date'], name='Inventory_s_request_ee42ca_idx'),
        ),
        migrations.AddIndex(
            model_name='storestocktransferrequest',
            index=models.Index(fields=['status'], name='Inventory_s_status_246e8a_idx'),
        ),
        migrations.AddIndex(
            model_name='requestnotification',
            index=models.Index(fields=['recipient', 'is_read'], name='Inventory_r_recipie_52a743_idx'),
        ),
        migrations.AddIndex(
            model_name='requestnotification',
            index=models.Index(fields=['created_date'], name='Inventory_r_created_0c086f_idx'),
        ),
        migrations.AddIndex(
            model_name='requestnotification',
            index=models.Index(fields=['notification_type'], name='Inventory_r_notific_5a7e5d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='supplierproduct',
            unique_together={('supplier', 'product_code')},
        ),
        migrations.AddIndex(
            model_name='systemnotification',
            index=models.Index(fields=['notification_type'], name='Inventory_s_notific_7b3dd5_idx'),
        ),
        migrations.AddIndex(
            model_name='systemnotification',
            index=models.Index(fields=['is_active', 'created_at'], name='Inventory_s_is_acti_aa6575_idx'),
        ),
        migrations.AddIndex(
            model_name='systemnotification',
            index=models.Index(fields=['expires_at'], name='Inventory_s_expires_28fafa_idx'),
        ),
        migrations.AddIndex(
            model_name='systemnotification',
            index=models.Index(fields=['priority'], name='Inventory_s_priorit_0dbf54_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotificationstatus',
            index=models.Index(fields=['user', 'is_read'], name='Inventory_u_user_id_5e5799_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotificationstatus',
            index=models.Index(fields=['user', 'is_dismissed'], name='Inventory_u_user_id_b21c79_idx'),
        ),
        migrations.AddIndex(
            model_name='usernotificationstatus',
            index=models.Index(fields=['notification', 'is_read'], name='Inventory_u_notific_79147a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usernotificationstatus',
            unique_together={('user', 'notification')},
        ),
    ]
