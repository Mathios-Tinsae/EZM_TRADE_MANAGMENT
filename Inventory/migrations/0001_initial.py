# Generated by Django 5.2.3 on 2025-07-09 00:41

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('shipped', 'Shipped'), ('received', 'Received'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('expected_delivery_date', models.DateField(blank=True, null=True)),
                ('actual_delivery_date', models.DateField(blank=True, null=True)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('notes', models.TextField(blank=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_ordered', models.PositiveIntegerField()),
                ('quantity_received', models.PositiveIntegerField(default=0)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
            ],
        ),
        migrations.CreateModel(
            name='ReturnRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for the return request.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('requested_date', models.DateTimeField(auto_now_add=True)),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
                ('is_item_restocked', models.BooleanField(default=False, help_text='Indicates if the item was returned to inventory.')),
            ],
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('low_stock_threshold', models.PositiveIntegerField(default=10, help_text='Threshold for low stock alerts.')),
                ('selling_price', models.DecimalField(decimal_places=2, help_text='Selling price of the product at this store.', max_digits=10)),
            ],
            options={
                'ordering': ['product__expiry_date', 'product__batch_number', 'product__name'],
            },
        ),
        migrations.CreateModel(
            name='StockTransferRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('in_transit', 'In Transit'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('manager_name', models.CharField(blank=True, max_length=100)),
                ('capacity', models.PositiveIntegerField(help_text='Maximum storage capacity')),
                ('current_utilization', models.PositiveIntegerField(default=0, help_text='Current storage utilization')),
                ('is_active', models.BooleanField(default=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='WarehouseProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.CharField(help_text='Unique identifier for the product', max_length=50, unique=True)),
                ('product_name', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('Pipes', 'Pipes'), ('Electric Wire', 'Electric Wire'), ('Cement', 'Cement'), ('Ceramics', 'Ceramics'), ('Glass and Finishing Materials', 'Glass and Finishing Materials')], max_length=100)),
                ('quantity_in_stock', models.PositiveIntegerField(default=0, help_text='Current quantity available in warehouse', validators=[django.core.validators.MinValueValidator(0)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Cost price per unit from supplier', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('minimum_stock_level', models.PositiveIntegerField(default=10, help_text='Minimum quantity that should be maintained in warehouse')),
                ('maximum_stock_level', models.PositiveIntegerField(default=1000, help_text='Maximum quantity that can be stored in warehouse')),
                ('reorder_point', models.PositiveIntegerField(default=20, help_text='Stock level at which reorder should be triggered')),
                ('sku', models.CharField(help_text='Stock Keeping Unit', max_length=100, unique=True)),
                ('barcode', models.CharField(blank=True, help_text='Product barcode', max_length=100)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight per unit in kg', max_digits=8, null=True)),
                ('dimensions', models.CharField(blank=True, help_text='Product dimensions (L x W x H)', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether product is currently available')),
                ('is_discontinued', models.BooleanField(default=False, help_text='Whether product is discontinued')),
                ('warehouse_location', models.CharField(blank=True, help_text='Physical location in warehouse (e.g., Aisle A, Shelf 3)', max_length=50)),
            ],
            options={
                'ordering': ['product_name', 'category'],
            },
        ),
        migrations.CreateModel(
            name='WarehouseStockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_type', models.CharField(choices=[('receipt', 'Stock Receipt'), ('shipment', 'Stock Shipment'), ('adjustment', 'Stock Adjustment'), ('transfer_in', 'Transfer In'), ('transfer_out', 'Transfer Out'), ('return', 'Return'), ('damage', 'Damage/Loss')], max_length=20)),
                ('quantity_change', models.IntegerField(help_text='Positive for additions, negative for reductions')),
                ('previous_stock_level', models.PositiveIntegerField(default=0)),
                ('new_stock_level', models.PositiveIntegerField(default=0)),
                ('reference_number', models.CharField(blank=True, help_text='PO number, invoice number, etc.', max_length=100)),
                ('reason', models.TextField(help_text='Reason for stock movement')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('Pipes', 'Pipes'), ('Electric Wire', 'Electric Wire'), ('Cement', 'Cement'), ('Ceramics', 'Ceramics'), ('Glass and Finishing Materials', 'Glass and Finishing Materials')], default='', max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('material', models.TextField()),
                ('size', models.CharField(blank=True, choices=[('XS', 'Extra Small'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'Extra Large'), ('XXL', 'Double Extra Large'), ('custom', 'Custom Size')], help_text='Product size', max_length=50, null=True)),
                ('variation', models.CharField(blank=True, help_text='Product variation (color, model, etc.)', max_length=100, null=True)),
                ('product_type', models.CharField(choices=[('raw_material', 'Raw Material'), ('finished_product', 'Finished Product'), ('component', 'Component'), ('tool', 'Tool'), ('equipment', 'Equipment'), ('consumable', 'Consumable')], default='finished_product', help_text='Type of product', max_length=50)),
                ('supplier_company', models.CharField(blank=True, help_text='Supplier company name', max_length=200, null=True)),
                ('batch_number', models.CharField(blank=True, help_text='Batch or lot number', max_length=100, null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='Product expiry date (if applicable)', null=True)),
                ('room', models.CharField(blank=True, help_text='Storage room', max_length=50, null=True)),
                ('shelf', models.CharField(blank=True, help_text='Shelf location', max_length=50, null=True)),
                ('floor', models.CharField(blank=True, help_text='Floor level', max_length=50, null=True)),
                ('storing_condition', models.CharField(choices=[('room_temperature', 'Room Temperature'), ('cool_dry_place', 'Cool Dry Place'), ('moisture_free', 'Moisture Free'), ('temperature_sensitive', 'Temperature Sensitive'), ('electrical_safe', 'Electrical Safe Storage'), ('ceramic_safe', 'Ceramic Safe Storage'), ('chemical_safe', 'Chemical Safe Storage')], default='room_temperature', help_text='Required storage conditions', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='Inventory_p_name_9ad0fc_idx'), models.Index(fields=['category'], name='Inventory_p_categor_d734ee_idx'), models.Index(fields=['supplier_company'], name='Inventory_p_supplie_185663_idx'), models.Index(fields=['batch_number'], name='Inventory_p_batch_n_8360e0_idx'), models.Index(fields=['expiry_date'], name='Inventory_p_expiry__ceb3d0_idx')],
            },
        ),
    ]
